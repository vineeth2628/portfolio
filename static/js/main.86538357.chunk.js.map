{"version":3,"sources":["Components/Header.js","Components/Footer.js","Components/CommandList.js","Utilities/constants.js","services/firebase.js","services/dataStore.js","Components/Terminal.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","CommandList","command","result","parse","require","style","color","marginLeft","help","app","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","i","getAllFiles","files","firebaseQuery","query","collection","where","getDocs","docs","map","doc","push","data","name","checkIfAuthorized","password","users","length","getFileData","fileName","updateFileData","content","docId","id","docRef","updateDoc","catch","err","console","log","Terminal","useState","history","setHistory","setPassword","authorization","setAuthorization","terminalInput","setTerminalInput","cmdExec","setCmdExec","fileFetch","setFileFetch","fileList","setFileList","updateFile","setUpdateFile","useEffect","callUpdate","commandResult","pop","split","file","document","getElementById","innerText","addHistory","join","callAuthorization","callFileData","getFileList","setList","list","ls","terminalColor","setTerminalColor","response","handleKeyPress","e","charCode","String","fromCharCode","which","toLowerCase","ctrlKey","metaKey","preventDefault","checkCmd","key","trim","str","forEach","x","cat","isEdit","cmd","newHistory","filter","item","cd","slice","onClick","focus","terminalPrefix","onKeyDown","contentEditable","getInputTemplate","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.86538357.chunk.js","sourcesContent":["import React from 'react';\nimport '../Styles/Header.css';\n\nfunction Header() {\n    return (\n        <div className= \"header\">\n            <h1>vin's portfolio</h1>\n        </div>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport '../Styles/Footer.css';\n\nfunction Footer() {\n    return (\n        <div className =\"footer\">\n            <p>Â© Vineeth Rajendran 2020</p>\n        </div>\n    )\n}\n\nexport default Footer\n","import React from 'react';\nimport '../Styles/CommandList.css';\n\nfunction CommandList({command,result}) {\n    var parse = require('html-react-parser');\n    return (\n        <div className= \"commandList\">\n            <p className=\"commandList__command\">{command?(<span style={{color:'#4af626'}}>root $  </span>):(<span></span>)}\n            {command}</p>\n            <div style={{marginLeft: '15px'}} className=\"commandList__result\">{parse(result)}</div>\n        </div>\n    )\n}\n\nexport default CommandList\n","\n//css style property for hyperlinks\nconst linkStyle=`\" color: inherit;text-decoration: none;\"`;\n//css style property for strong text\nconst strongStyle =`\"padding:5px\"`;\n \n\n\nconst help =() =>{\n    return `<br>\n    <li><strong>ls</strong> - show files in the current directory</li>\n    <li><strong>path</strong> - display current directory</li>\n    <li><strong>cat FILENAME</strong> - display contents of FILENAME in the terminal window</li>\n    <li><strong>clear</strong> - clear current terminal window</li>\n    <li><strong>color COLORNAME</strong> - display the content in color COLORNAME(can use hex values)</li>\n    <br>`;\n}\n\nexport default help;\n","// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport {getFirestore} from 'firebase/firestore'\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\n// For Firebase JS SDK v7.20.0 and later, measurementId is optional\nconst firebaseConfig = {\n  apiKey: \"AIzaSyB4nzUUEsmdvn8EiqZ1cTO8jcQ5H7v__E8\",\n  authDomain: \"portfolio-f7557.firebaseapp.com\",\n  projectId: \"portfolio-f7557\",\n  storageBucket: \"portfolio-f7557.appspot.com\",\n  messagingSenderId: \"342054147256\",\n  appId: \"1:342054147256:web:e203df67276fa65fb5904d\",\n  measurementId: \"G-DKQJKGS6V1\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app)\n\nexport {db}","import { collection, query, onSnapshot, getDocs, where,updateDoc,doc, getDoc} from 'firebase/firestore';\nimport { db } from './firebase';\n\nconst getAllFiles = async () => {\n\n    let files = [];\n\n    let firebaseQuery = query(collection(db, 'list'), where('isActive', '==', true));\n    const data = await getDocs(firebaseQuery);\n\n    data.docs.map((doc) => { \n        files.push(doc.data().name) \n    })\n\n    return files;\n}\n\n\nconst checkIfAuthorized = async (password) => {\n\n    if (!password)\n        return false;\n    let users = [];\n    let firebaseQuery = query(collection(db, 'users'), where('isActive', '==', true), where('password', '==', password));\n\n    const data = await getDocs(firebaseQuery);\n\n    data.docs.map((doc) => { users.push({ ...doc.data() }) });\n\n    if (users && users.length)\n        return true;\n    return false;\n\n}\n\nconst getFileData = async (fileName) => {\n    if (!fileName)\n        return null;\n    let files = [];\n    let firebaseQuery = query(collection(db, 'list'), where('isActive', '==', true), where('name', '==', fileName));\n\n    const data = await getDocs(firebaseQuery);\n\n    data.docs.map((doc) => { files.push({ ...doc.data() }) });\n\n    if (files && files.length && files[0])\n        return files[0];\n    return null;\n\n}\n\nconst updateFileData = async(fileName,content) =>{\n\n    let docId;\n\n    let firebaseQuery = query(collection(db, 'list'), where('isActive', '==', true), where('name', '==', fileName));\n\n    const data = await getDocs(firebaseQuery);\n\n    docId = data.docs[0].id\n\n    let docRef = doc(db,'list',docId)\n    updateDoc(docRef,{content: content})\n    .catch((err)=>{\n        console.log(err)\n    })\n\n    return;\n}\n\nexport { getAllFiles, checkIfAuthorized, getFileData ,updateFileData};","import React, { useState, useEffect } from 'react';\nimport '../Styles/Terminal.css';\nimport CommandList from './CommandList';\nimport help from '../Utilities/constants';\n\nimport { checkIfAuthorized, getFileData, getAllFiles, updateFileData } from '../services/dataStore';\n\n\nfunction Terminal() {\n    //it stores the command entered and the output generated in an array\n    const [history, setHistory] = useState([{\n        command: '',\n        result: `\\\\^o^/ - type 'help' to get started`\n    }]);\n\n    const [password, setPassword] = useState(false);\n\n    const [authorization, setAuthorization] = useState(false);\n\n    const [terminalInput, setTerminalInput] = useState('');\n\n    const [cmdExec, setCmdExec] = useState(false);\n\n    const [fileFetch, setFileFetch] = useState(false);\n\n    const [fileList, setFileList] = useState(false);\n\n    const [updateFile, setUpdateFile] = useState();\n\n    useEffect(()=>{\n\n        async function callUpdate(fileName,content){\n            await updateFileData(fileName,content);\n        }\n\n        if(updateFile && updateFile.content){\n            callUpdate(updateFile.fileName,updateFile.content);\n            setUpdateFile(null);\n        }\n    },[updateFile])\n\n    useEffect(() => {\n\n        async function callAuthorization() {\n            let result = await checkIfAuthorized(terminalInput);\n            let commandResult = '';\n\n            let command = history.pop();\n            command = (command && command['command']) ? command['command'].split(' ') : [];\n\n            if (result) {\n                if (command.length) {\n\n                    if (command[0] == 'cat' && command[1] == '>' && command[2]) {\n                        let file = await getFileData(command[2]);\n                        setUpdateFile({fileName : command[2]})\n\n                        if(file){\n                            setCmdExec(true)\n                            document.getElementById('terminal__inputText').innerText = file['content'];\n                        }\n                        else{\n                            commandResult = \"Error: file not found in current directory\"\n                        }\n                    }\n                }\n            }\n            else\n                commandResult = '<div>Error: You have no authorization</div>';\n\n            addHistory(`${command.join(' ')}`, `<div>password:${terminalInput}</div>${commandResult}`);\n            setPassword(false);\n            setAuthorization(false);\n        }\n\n        if (authorization)\n            callAuthorization();\n    }, [authorization])\n\n\n    useEffect(() => {\n\n        async function callFileData(fileName) {\n            let result = await getFileData(fileName);\n            let commandResult = '';\n            if (result) {\n                commandResult = result['content'] || '';\n            }\n            else {\n                commandResult = 'Error: file not found in current directory'\n\n            }\n            addHistory(terminalInput, `<div>${commandResult}</div>`);\n            setFileFetch(false);\n        }\n\n        if (fileFetch) {\n            let command = terminalInput.split(' ');\n            if (command.length && command[0] == 'cat' && command[1] != '>') {\n                callFileData(command[1])\n            }\n\n        }\n\n    }, [fileFetch])\n\n\n    useEffect(()=>{\n\n        async function getFileList(){\n            let files = await getAllFiles();\n            setList(files);\n        }\n\n        if(list.length ==0)\n        getFileList();\n\n        if(fileList){\n            getFileList()\n            let commandResult = ls();\n            addHistory(terminalInput,`<div>${commandResult}</div>`)\n            setFileList(false);\n        }\n\n    },[fileList])\n\n    //stores the list of filenames to be read by the user\n    const [list, setList] = useState([]);\n    // const list = ['about.txt', 'resume.txt', 'contact.txt', 'skillset.txt', 'projects.txt'];\n    //state variable for the text color inside the terminal\n    const [terminalColor, setTerminalColor] = useState('white');\n\n    //adds the entered command and the output generated inside the state variable\n    const addHistory = (command, result) => {\n        const response = { command, result };\n        setHistory([...history, response]);\n    }\n    //eventHandler function when the enter key is pressed inside the terminal\n    const handleKeyPress = (e) => {\n        if (cmdExec) {\n            let charCode = String.fromCharCode(e.which).toLowerCase();\n            if ((e.ctrlKey || e.metaKey) && charCode === 'z') {\n                e.preventDefault();\n                var command = document.getElementById('terminal__inputText').innerText;\n                setTerminalInput(command);\n                document.getElementById('terminal__inputText').innerText = '';\n                checkCmd(command);\n            }\n        }\n\n        else {\n            if (e.key === \"Enter\") {\n                e.preventDefault();\n                var command = document.getElementById('terminal__inputText').innerText;\n                setTerminalInput(command);\n                document.getElementById('terminal__inputText').innerText = '';\n                command = command.trim();\n                command = command.split(' ');\n                checkCmd(command);\n            }\n        }\n\n    }\n    //clears the history of commands and the output generated\n    const clearHistory = () => {\n        history.forEach(function ({ command }) {\n            const newHistory = history.filter((item) => item.id === command);\n            setHistory(newHistory);\n        })\n    }\n\n    //prints the list of filenames\n    const ls = () => {\n        var str = '';\n        list.forEach(function (x) {\n            str = `${str}<p>${x}</p>`;\n        })\n        return str;\n    }\n\n    const cd = (command) => {\n        if (command[1] === \"root\")\n            return \" \";\n        else if (command[1])\n            return 'Error: not a valid directory';\n        else\n            return 'Error: you did not specify a directory';\n    }\n\n    const cat = (fileName, isEdit = false) => {\n        if (isEdit) {\n            setPassword(true);\n                return '';\n        }\n        else {\n            setFileFetch(true);\n            return;\n        }\n    }\n\n    //function to set the user defined text color\n    const color = (command) => {\n        if (command[1]) {\n            setTerminalColor(command[1]);\n            return '';\n        }\n        else {\n            return \"Error: you did not specify a color\";\n        }\n    }\n\n\n    //function to return appropriate output for the given command\n    const checkCmd = (command) => {\n\n        let result = \"\";\n\n        if (password) {\n            setAuthorization(true);\n            return;\n        }\n\n        if (cmdExec) {\n\n            addHistory(``, `<div style='white-space:pre-wrap'>${command}</pre>`);\n            setCmdExec(false);\n            let content = command\n            setUpdateFile({...updateFile,content})\n            return;\n        }\n\n        let cmd = command.join(\" \");\n\n        //if no command is entered\n        if (command[0] === '') {\n            addHistory(`${cmd}`, `<div>${result}</div>`);\n        }\n        else {\n            switch (command[0]) {\n                case \"clear\":\n                    addHistory(' ', ' ');\n                    clearHistory();\n                    break;\n                case \"help\":\n                    result = help();\n                    break;\n                case \"cat\":\n                    if (command[1])\n                        if (command[1] == '>') {\n                            result = cat(command[2], true);\n                        }\n                        else {\n                            result = cat(command[1]);\n                            return;\n                        }\n                    else\n                        result = \"Error: you did not specify a file\";\n                    break;\n                case \"ls\":\n                    setFileList(true);\n                    return;\n                    result = ls();\n                    break;\n                case \"cd\":\n                    result = cd(command);\n                    break;\n                case \"path\":\n                    result = 'user/root';\n                    break;\n                case \"echo\":\n                    result = command.slice(1,).join(' ');\n                    break;\n                case \"mkdir\":\n                    result = 'Error: No write access';\n                    break;\n                case \"color\":\n                    result = color(command);\n                    break;\n                default:\n                    result = \"Error: command not found\";\n                    break;\n            }\n        }\n        if (command[0] !== 'clear')\n            addHistory(`${cmd}`, `<div>${result}</div>`);\n    }\n\n    const getInputTemplate = () => {\n        let style = {};\n\n        let terminalPrefix = '';\n        if (password) {\n            terminalPrefix = 'password:';\n        }\n        else if (cmdExec) {\n            style['whiteSpace'] = 'pre-line';\n            terminalPrefix = '';\n        }\n        else {\n            style['color'] = '#4af626';\n            terminalPrefix = 'root $'\n        }\n\n        return (\n            <div style={style} className=\"terminal__input\">{terminalPrefix}\n                <span style={{ color: terminalColor }} id=\"terminal__inputText\" onKeyDown={handleKeyPress} contentEditable=\"true\" ></span>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"terminal\" onClick={() => { document.getElementById('terminal__inputText').focus() }}>\n            <div className=\"terminal__bar\"><h4>ð  ð¡ ð¢</h4> </div>\n            <div className=\"terminal__container\" style={{ color: terminalColor }}>\n                {history.map((command) => (\n                    <CommandList command={command.command} result={command.result} />\n                ))}\n                {getInputTemplate()}\n            </div>\n        </div>\n    )\n}\nexport default Terminal\n","import React  from 'react';\nimport './App.css';\nimport Header from './Components/Header';\nimport Footer from './Components/Footer';\nimport Terminal from './Components/Terminal';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Header className= \"app__header\" />\n      <Terminal className=\"app__terminal\" />\n      <Footer className =\" app__footer\"/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}